use std::str::FromStr;
use std::sync::Arc;
use crate::types::{Cons, ConsValue};

grammar;

// This is how we parse multiple sexpressions at once; returning a vector of them. 
pub SExpressions: Vec<Arc<Cons>> = {
    <e:SExpression> => vec![e],
    <e:SExpression> <es:SExpressions> => {
        let mut res = vec![e];
        res.extend(es);
        res
    },
};

// Here we parse a single SExpression
SExpression: Arc<Cons> = {
    // We can take two SExpressions in ()
    "(" <s:SExpression> <t:SExpressions> ")" => {
        let mut final_vec = vec![s];
        for elem in t {
            final_vec.push(elem);
        }
        let mut curr = Cons::Value(ConsValue::NIL);
        for rev_elem in final_vec.iter().rev() {
            curr = Cons::Cell(rev_elem.clone(), Arc::new(curr));
        }
        Arc::new(curr)
    },
    // Quoted SExpressions are also SExpressions
    "'" <s:SExpression> => Arc::new(Cons::Quoted(s)),
    // Extra parenthesis don't matter.
    "(" <s:SExpression> ")" => s,
    // An atom is an sexpression
    <a:Atom> => Arc::new(Cons::Value(a))
};

Atom: ConsValue = {
    <i:Num> => ConsValue::Int(i),
    <f:Float> => ConsValue::Float(f),
    <b:Boolean> => ConsValue::Boolean(b),
    <id:Ident> => ConsValue::Symbol(id),
    <com:Comment> => ConsValue::Comment(com),
    <s:LString> => ConsValue::String(s),
    "'()" => ConsValue::NIL
};

Num: i64 = <n:r#"-?[0-9]+([0-9]+)?"#> => i64::from_str(n).unwrap();

Float: f64 = <f:r#"(?:-?[0-9]+[\.][0-9]*)|(?:-?[0-9]*[\.][0-9]+)"#> => f64::from_str(f).unwrap();

Boolean: bool = {
    "#t" => true,
    "#f" => false,
};

Ident: String = <id:r#"([^.[[:blank:]]'"\(\);0-9\-][^[[:blank:]]'"\(\);]*|\-)"#> => id.to_string();

LString: String = <s:r#""(?:[^"\\]|\\.)*""#> => {
    let string = s.to_string();
    string[1..(string.len()-1)].to_string()
};

Comment: String = <com:r#";.*"#> => {
    let comment = com.to_string();
    comment[1..(comment.len())].to_string()
};
